name: Deploy develop

on:
  workflow_dispatch:
    branches:
      - "develop"
  workflow_run:
    branches:
      - "develop"
    types:
      - "completed"
    workflows:
      - "Create and publish a Service image"
env:
  CI_COMMIT_BRANCH: "develop"
  CI_PROJECT_NAME: "${{ github.event.repository.name }}"
  CI_REGISTRY: "ghcr.io"
  DOCKER_REPO_PASSWORD: "${{ secrets.DOCKER_REPO_PASSWORD }}"
  DOCKER_REPO_URL: "${{ vars.DOCKER_REPO_URL }}"
  DOCKER_REPO_URL_LOGIN: "${{ vars.DOCKER_REPO_URL_LOGIN }}"
  DOCKER_REPO_USERNAME: "${{ secrets.DOCKER_REPO_USERNAME }}"
  CONFIG_TOKEN: "${{ secrets.CONFIG_TOKEN }}"
  KEYCLOAK_ADMIN: "${{ secrets.KEYCLOAK_ADMIN }}"
  KEYCLOAK_ADMIN_PASSWORD: "${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}"
  KC_DB_USERNAME: "${{ secrets.KC_DB_USERNAME }}"
  KC_DB_PASSWORD: "${{ secrets.KC_DB_PASSWORD }}"

jobs:
  deploy:
    runs-on:
      - develop
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: develop
      - run: |
          pwd
          cd docker
          pwd
          echo $DOCKER_REPO_PASSWORD | docker login $DOCKER_REPO_URL_LOGIN -u $DOCKER_REPO_USERNAME --password-stdin
          echo $DOCKER_REPO_URL
          cat docker-compose.yaml-links.yml docker-compose.module.yml > docker-compose.module.gen.yml
          env $(cat ./env/$CI_COMMIT_BRANCH/.env | grep ^[A-Z] | xargs) docker --context $CI_COMMIT_BRANCH stack deploy -c docker-compose.module.gen.yml --with-registry-auth module
          
          cat docker-compose.yaml-links.yml docker-compose.config.yml > docker-compose.config.gen.yml
          env $(cat ./env/$CI_COMMIT_BRANCH/.env | grep ^[A-Z] | xargs) docker --context $CI_COMMIT_BRANCH stack deploy -c docker-compose.config.gen.yml --with-registry-auth dripid-config
          
          cat docker-compose.yaml-links.yml docker-compose.gateway.yml > docker-compose.gateway.gen.yml
          env $(cat ./env/$CI_COMMIT_BRANCH/.env | grep ^[A-Z] | xargs) docker --context $CI_COMMIT_BRANCH stack deploy -c docker-compose.gateway.gen.yml --with-registry-auth dripid-gateway
          
          cat docker-compose.yaml-links.yml docker-compose.auth.yml > docker-compose.auth.gen.yml
          env $(cat ./env/$CI_COMMIT_BRANCH/.env | grep ^[A-Z] | xargs) docker --context $CI_COMMIT_BRANCH stack deploy -c docker-compose.auth.gen.yml --with-registry-auth dripid-auth