version: '3.9'

services:
  auth-postgres:
    <<: *postgres-default-config
    restart: always
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER_FILE: /run/secrets/auth-postgres-username
      POSTGRES_PASSWORD_FILE: /run/secrets/auth-postgres-password
      PGDATA: "/var/lib/postgresql/data/pgdata"
    secrets:
      - auth-postgres-username
      - auth-postgres-password
    ports:
      - "5431:5432"
    volumes:
      - auth-pgdata-volume:/var/lib/postgresql/data:rw
      - type: tmpfs           #Эквивалент записи: shm_size: 1gb.
        target: /dev/shm      #Работает в swarm режиме
        tmpfs:
          size: 1024000000

  auth-keycloak:
    image: ${DOCKER_REPO_URL}${CI_PROJECT_NAME}/keycloak-23.0:${IMAGE_TAG}
    command: start-dev
    environment:
      KEYCLOAK_ADMIN : admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_SCHEMA: public
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_DB_URL: jdbc:postgresql://auth-postgres:5432/keycloak
    secrets:
      - auth-postgres-username
      - auth-postgres-password
    ports:
      - "9000:8080"
    depends_on:
      - auth-postgres

  auth-service:
    <<: *default-spring-config
    image: ${DOCKER_REPO_URL}${CI_PROJECT_NAME}/auth-service:${IMAGE_TAG}
    hostname: "{{index .Service.Labels \"com.docker.stack.namespace\"}}.{{.Task.Slot}}.{{index .Service.Labels \"ru.seals.service\"}}"
    deploy:
      labels:
        ru.seals.service: "auth-service"
      resources:
        reservations: *resources-low
        limits: *resources-high
    environment:
      <<: *environment
      VIRTUAL_HOST: "auth-service"
    ports:
      - "5002:5000"
    depends_on:
      - auth-keycloak

volumes:
  auth-pgdata-volume:
    name: docker_auth-pgdata

secrets:
  auth-postgres-username:
    external: true
  auth-postgres-password:
    external: true

networks:
  default:
    name: dripid-network
    external: true